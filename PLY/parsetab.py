
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSEK CLOSEP COLON COMA COUT CTEFLOAT CTEINT CTESTRING DIVIDE DO ELSE END ENDL EQUAL FLOAT GREATER ID IF INT ISNOT LESS MINUS MULTIPLY OPENK OPENP PLUS PROGRAM VAR WHILEprogram : PROGRAM ID ENDL programPrimaprogramPrima : body END \n                     | vars body ENDvars : VAR ID idPrimaidPrima : COMA ID idPrima\n               | COLON typeidPrima2 : ID idPrimavarsPrima : \n               | idPrima2type : INT ENDL varsPrima\n            | FLOAT ENDL varsPrimabody : OPENK bodyPrima CLOSEKbodyPrima : \n               | statement bodyPrimastatement : assign\n               | condition\n               | cycle\n               | printprint : COUT OPENP printPrima printPrima : expresion expresionPrima\n               | CTESTRING expresionPrimaexpresionPrima : COMA printPrima \n               | CLOSEP ENDLassign : ID EQUAL expresion ENDLcycle : DO body WHILE OPENP expresion CLOSEP ENDLexpresion : exp  expresionPrima2expresionPrima2 : \n               | GREATER exp\n               | LESS exp\n               | ISNOT expcondition : IF OPENP expresion CLOSEP body conditionPrimaconditionPrima : ENDL\n               | ELSE body ENDLfactor : factorPrimafactorPrima : OPENP expresion CLOSEP\n               | factorPrima2\n               | PLUS factorPrima2\n               | MINUS factorPrima2factorPrima2 : ID\n               | ctecte : CTEINT\n           | CTEFLOATexp : termino expPrimaexpPrima : \n           | PLUS exp\n           | MINUS exptermino : factor terminoPrimaterminoPrima : \n           | MULTIPLY termino\n           | DIVIDE termino'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,10,23,],[0,-1,-2,-3,]),'ID':([2,8,9,13,14,15,16,17,26,27,29,31,39,41,42,48,55,57,58,59,61,62,64,65,70,71,72,74,76,77,88,89,94,95,100,101,],[3,18,22,18,-15,-16,-17,-18,33,33,33,51,33,33,33,-19,-24,33,33,33,33,33,33,33,33,-20,33,-21,92,92,-22,-23,-31,-32,-25,-33,]),'ENDL':([3,24,33,34,35,36,37,38,40,43,44,45,53,54,56,60,63,67,68,73,78,79,80,81,82,83,84,85,86,97,99,],[4,-12,-39,55,-27,-44,-48,-34,-36,-40,-41,-42,76,77,-26,-43,-47,-37,-38,89,-28,-29,-30,-45,-46,-49,-50,-35,95,100,101,]),'OPENK':([4,7,20,30,52,69,75,76,77,90,91,93,96,98,],[8,8,8,-4,-6,8,-5,-8,-8,-10,-9,-11,8,-7,]),'VAR':([4,],[9,]),'END':([6,11,24,],[10,23,-12,]),'CLOSEK':([8,12,13,14,15,16,17,25,48,55,71,74,88,89,94,95,100,101,],[-13,24,-13,-15,-16,-17,-18,-14,-19,-24,-20,-21,-22,-23,-31,-32,-25,-33,]),'IF':([8,13,14,15,16,17,48,55,71,74,88,89,94,95,100,101,],[19,19,-15,-16,-17,-18,-19,-24,-20,-21,-22,-23,-31,-32,-25,-33,]),'DO':([8,13,14,15,16,17,48,55,71,74,88,89,94,95,100,101,],[20,20,-15,-16,-17,-18,-19,-24,-20,-21,-22,-23,-31,-32,-25,-33,]),'COUT':([8,13,14,15,16,17,48,55,71,74,88,89,94,95,100,101,],[21,21,-15,-16,-17,-18,-19,-24,-20,-21,-22,-23,-31,-32,-25,-33,]),'EQUAL':([18,],[26,]),'OPENP':([19,21,26,27,29,39,47,57,58,59,61,62,64,65,70,72,],[27,29,39,39,39,39,70,39,39,39,39,39,39,39,39,39,]),'COMA':([22,33,35,36,37,38,40,43,44,45,49,50,51,56,60,63,67,68,78,79,80,81,82,83,84,85,92,],[31,-39,-27,-44,-48,-34,-36,-40,-41,-42,72,72,31,-26,-43,-47,-37,-38,-28,-29,-30,-45,-46,-49,-50,-35,31,]),'COLON':([22,51,92,],[32,32,32,]),'WHILE':([24,28,],[-12,47,]),'ELSE':([24,86,],[-12,96,]),'PLUS':([26,27,29,33,36,37,38,39,40,43,44,45,57,58,59,61,62,63,64,65,67,68,70,72,83,84,85,],[41,41,41,-39,61,-48,-34,41,-36,-40,-41,-42,41,41,41,41,41,-47,41,41,-37,-38,41,41,-49,-50,-35,]),'MINUS':([26,27,29,33,36,37,38,39,40,43,44,45,57,58,59,61,62,63,64,65,67,68,70,72,83,84,85,],[42,42,42,-39,62,-48,-34,42,-36,-40,-41,-42,42,42,42,42,42,-47,42,42,-37,-38,42,42,-49,-50,-35,]),'CTEINT':([26,27,29,39,41,42,57,58,59,61,62,64,65,70,72,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CTEFLOAT':([26,27,29,39,41,42,57,58,59,61,62,64,65,70,72,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'CTESTRING':([29,72,],[50,50,]),'INT':([32,],[53,]),'FLOAT':([32,],[54,]),'MULTIPLY':([33,37,38,40,43,44,45,67,68,85,],[-39,64,-34,-36,-40,-41,-42,-37,-38,-35,]),'DIVIDE':([33,37,38,40,43,44,45,67,68,85,],[-39,65,-34,-36,-40,-41,-42,-37,-38,-35,]),'GREATER':([33,35,36,37,38,40,43,44,45,60,63,67,68,81,82,83,84,85,],[-39,57,-44,-48,-34,-36,-40,-41,-42,-43,-47,-37,-38,-45,-46,-49,-50,-35,]),'LESS':([33,35,36,37,38,40,43,44,45,60,63,67,68,81,82,83,84,85,],[-39,58,-44,-48,-34,-36,-40,-41,-42,-43,-47,-37,-38,-45,-46,-49,-50,-35,]),'ISNOT':([33,35,36,37,38,40,43,44,45,60,63,67,68,81,82,83,84,85,],[-39,59,-44,-48,-34,-36,-40,-41,-42,-43,-47,-37,-38,-45,-46,-49,-50,-35,]),'CLOSEP':([33,35,36,37,38,40,43,44,45,46,49,50,56,60,63,66,67,68,78,79,80,81,82,83,84,85,87,],[-39,-27,-44,-48,-34,-36,-40,-41,-42,69,73,73,-26,-43,-47,85,-37,-38,-28,-29,-30,-45,-46,-49,-50,-35,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programPrima':([4,],[5,]),'body':([4,7,20,69,96,],[6,11,28,86,99,]),'vars':([4,],[7,]),'bodyPrima':([8,13,],[12,25,]),'statement':([8,13,],[13,13,]),'assign':([8,13,],[14,14,]),'condition':([8,13,],[15,15,]),'cycle':([8,13,],[16,16,]),'print':([8,13,],[17,17,]),'idPrima':([22,51,92,],[30,75,98,]),'expresion':([26,27,29,39,70,72,],[34,46,49,66,87,49,]),'exp':([26,27,29,39,57,58,59,61,62,70,72,],[35,35,35,35,78,79,80,81,82,35,35,]),'termino':([26,27,29,39,57,58,59,61,62,64,65,70,72,],[36,36,36,36,36,36,36,36,36,83,84,36,36,]),'factor':([26,27,29,39,57,58,59,61,62,64,65,70,72,],[37,37,37,37,37,37,37,37,37,37,37,37,37,]),'factorPrima':([26,27,29,39,57,58,59,61,62,64,65,70,72,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factorPrima2':([26,27,29,39,41,42,57,58,59,61,62,64,65,70,72,],[40,40,40,40,67,68,40,40,40,40,40,40,40,40,40,]),'cte':([26,27,29,39,41,42,57,58,59,61,62,64,65,70,72,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'printPrima':([29,72,],[48,88,]),'type':([32,],[52,]),'expresionPrima2':([35,],[56,]),'expPrima':([36,],[60,]),'terminoPrima':([37,],[63,]),'expresionPrima':([49,50,],[71,74,]),'varsPrima':([76,77,],[90,93,]),'idPrima2':([76,77,],[91,91,]),'conditionPrima':([86,],[94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ENDL programPrima','program',4,'p_program','lex.py',101),
  ('programPrima -> body END','programPrima',2,'p_programPrima','lex.py',110),
  ('programPrima -> vars body END','programPrima',3,'p_programPrima','lex.py',111),
  ('vars -> VAR ID idPrima','vars',3,'p_vars','lex.py',114),
  ('idPrima -> COMA ID idPrima','idPrima',3,'p_idPrima','lex.py',124),
  ('idPrima -> COLON type','idPrima',2,'p_idPrima','lex.py',125),
  ('idPrima2 -> ID idPrima','idPrima2',2,'p_idPrima2','lex.py',134),
  ('varsPrima -> <empty>','varsPrima',0,'p_varsPrima','lex.py',144),
  ('varsPrima -> idPrima2','varsPrima',1,'p_varsPrima','lex.py',145),
  ('type -> INT ENDL varsPrima','type',3,'p_type','lex.py',148),
  ('type -> FLOAT ENDL varsPrima','type',3,'p_type','lex.py',149),
  ('body -> OPENK bodyPrima CLOSEK','body',3,'p_body','lex.py',156),
  ('bodyPrima -> <empty>','bodyPrima',0,'p_bodyPrima','lex.py',159),
  ('bodyPrima -> statement bodyPrima','bodyPrima',2,'p_bodyPrima','lex.py',160),
  ('statement -> assign','statement',1,'p_statement','lex.py',163),
  ('statement -> condition','statement',1,'p_statement','lex.py',164),
  ('statement -> cycle','statement',1,'p_statement','lex.py',165),
  ('statement -> print','statement',1,'p_statement','lex.py',166),
  ('print -> COUT OPENP printPrima','print',3,'p_print','lex.py',169),
  ('printPrima -> expresion expresionPrima','printPrima',2,'p_printPrima','lex.py',172),
  ('printPrima -> CTESTRING expresionPrima','printPrima',2,'p_printPrima','lex.py',173),
  ('expresionPrima -> COMA printPrima','expresionPrima',2,'p_expresionPrima','lex.py',176),
  ('expresionPrima -> CLOSEP ENDL','expresionPrima',2,'p_expresionPrima','lex.py',177),
  ('assign -> ID EQUAL expresion ENDL','assign',4,'p_assign','lex.py',180),
  ('cycle -> DO body WHILE OPENP expresion CLOSEP ENDL','cycle',7,'p_cycle','lex.py',183),
  ('expresion -> exp expresionPrima2','expresion',2,'p_expresion','lex.py',186),
  ('expresionPrima2 -> <empty>','expresionPrima2',0,'p_expresionPrima2','lex.py',189),
  ('expresionPrima2 -> GREATER exp','expresionPrima2',2,'p_expresionPrima2','lex.py',190),
  ('expresionPrima2 -> LESS exp','expresionPrima2',2,'p_expresionPrima2','lex.py',191),
  ('expresionPrima2 -> ISNOT exp','expresionPrima2',2,'p_expresionPrima2','lex.py',192),
  ('condition -> IF OPENP expresion CLOSEP body conditionPrima','condition',6,'p_condition','lex.py',195),
  ('conditionPrima -> ENDL','conditionPrima',1,'p_conditionPrima','lex.py',198),
  ('conditionPrima -> ELSE body ENDL','conditionPrima',3,'p_conditionPrima','lex.py',199),
  ('factor -> factorPrima','factor',1,'p_factor','lex.py',202),
  ('factorPrima -> OPENP expresion CLOSEP','factorPrima',3,'p_factorPrima','lex.py',205),
  ('factorPrima -> factorPrima2','factorPrima',1,'p_factorPrima','lex.py',206),
  ('factorPrima -> PLUS factorPrima2','factorPrima',2,'p_factorPrima','lex.py',207),
  ('factorPrima -> MINUS factorPrima2','factorPrima',2,'p_factorPrima','lex.py',208),
  ('factorPrima2 -> ID','factorPrima2',1,'p_factorPrima2','lex.py',211),
  ('factorPrima2 -> cte','factorPrima2',1,'p_factorPrima2','lex.py',212),
  ('cte -> CTEINT','cte',1,'p_cte','lex.py',215),
  ('cte -> CTEFLOAT','cte',1,'p_cte','lex.py',216),
  ('exp -> termino expPrima','exp',2,'p_exp','lex.py',219),
  ('expPrima -> <empty>','expPrima',0,'p_expPrima','lex.py',222),
  ('expPrima -> PLUS exp','expPrima',2,'p_expPrima','lex.py',223),
  ('expPrima -> MINUS exp','expPrima',2,'p_expPrima','lex.py',224),
  ('termino -> factor terminoPrima','termino',2,'p_termino','lex.py',227),
  ('terminoPrima -> <empty>','terminoPrima',0,'p_terminoPrima','lex.py',230),
  ('terminoPrima -> MULTIPLY termino','terminoPrima',2,'p_terminoPrima','lex.py',231),
  ('terminoPrima -> DIVIDE termino','terminoPrima',2,'p_terminoPrima','lex.py',232),
]
